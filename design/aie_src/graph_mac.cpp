#include "graph_mac.h"
#include "graph_utils.h"


template <template<typename, int, int, int> class MAC, 
  typename TT, int B, int W, int IS_RELU>
class MacGraphTest : public adf::graph {

  private:
    static constexpr int TTSIZE = sizeof(TT);
    MacGraph<MAC, TT, B, W, IS_RELU> g;

  public:
    adf::input_plio plin[1];
    adf::output_plio plout[1];

    MacGraphTest(
      const std::string& id,
      std::vector<float> weights,
      std::vector<float> bias,
      const std::string& INP_TXT,
      const std::string& OUT_TXT = "mac_out.txt"
    ): g(weights, bias) { 
      plin[0] = adf::input_plio::create("plin0_mac"+id+"_input", PLIO64_ARG(INP_TXT));
      plout[0] = adf::output_plio::create("plout0_mac"+id+"_output", PLIO64_ARG(OUT_TXT));
      adf::connect<adf::window<B*W*TTSIZE>> (plin[0].out[0], g.pin[0]);
      adf::connect<adf::window<B*W*TTSIZE>> (g.pout[0], plout[0].in[0]);
    }
};

// chunk to reduce I/O buffer sizes
const int B = 196;
const int BCHUNK = 28;
std::vector<float_t> k2mac_w {0.005778382532298565, 0.015041159465909004, 0.02194145694375038, 0.007657285314053297, 0.012122919782996178, 0.0016006241785362363, 0.0023626848123967648, 0.013408606871962547, 0.007946687750518322, 0.019884364679455757, 0.008642595261335373, 0.0044196066446602345, 0.005035438109189272, 0.004094195086508989, 0.002173038199543953, 0.003930707927793264, 0.002155045047402382, 0.004150409251451492, 0.004995717201381922, 0.010747718624770641, 0.010752622969448566, 0.007368292659521103, 0.01109907403588295, 0.0026228814385831356, 0.004045409150421619, 0.007420181762427092, 0.004226306453347206, 0.007147046271711588, 0.004734814167022705, 0.003011019667610526, 0.003348608734086156, 0.0025429199449718, 0.00451533030718565, 0.008249899372458458, 0.0035573034547269344, 0.007336757145822048, 0.004009883850812912, 0.010154973715543747, 0.0036219123285263777, 0.011516907252371311, 0.0057212612591683865, 0.0036936714313924313, 0.0030809950549155474, 0.0037104645743966103, 0.007974856533110142, 0.0026674855034798384, 0.008378353901207447, 0.006822926923632622, 0.0053709098137915134, 0.0027234351728111506, 0.003398037049919367, 0.003294202499091625, 0.0018829430919140577, 0.003819072153419256, 0.002962147817015648, 0.006273340899497271, 0.0018322409596294165, 0.0056596193462610245, 0.0026449039578437805, 0.011899781413376331, 0.005207843147218227, 0.005589200183749199, 0.0013678371906280518, 0.0017227771459147334, 0.004144021309912205, 0.005091014783829451, 0.003867818508297205, 0.005440181586891413, 0.0034257930237799883, 0.0035796344745904207, 0.0027490458451211452, 0.01487415935844183, 0.006861483212560415, 0.0012429533526301384, 0.009257631376385689, 0.004715601447969675, 0.008944378234446049, 0.01193405780941248, 0.0019963157828897238, 0.009035264141857624, 0.01227429136633873, 0.002841553883627057, 0.006410583853721619, 0.002775137312710285, 0.0020031719468533993, 0.001571947243064642, 0.0034472555853426456, 0.0067250425927340984, 0.00501850014552474, 0.00191393680870533, 0.0012514565605670214, 0.010048984549939632, 0.002097154501825571, 0.008848457597196102, 0.006331693381071091, 0.007192261051386595, 0.0032924434635788202, 0.007842074148356915, 0.003275464288890362, 0.0052751200273633, 0.004456058144569397, 0.007627774029970169, 0.008011198602616787, 0.0029595782980322838, 0.004647390451282263, 0.004767381586134434, 0.006501047406345606, 0.006396400276571512, 0.0015603711362928152, 0.002780755516141653, 0.004636417608708143, 0.004639904480427504, 0.003219636157155037, 0.0055270022712647915, 0.004407903179526329, 0.004579485394060612, 0.004546433221548796, 0.003335401648655534, 0.007792137563228607, 0.004045771434903145, 0.002389755332842469, 0.0030877499375492334, 0.008375706151127815, 0.00813143141567707, 0.005368062295019627, 0.006107611581683159, 0.0048975348472595215, 0.0025877647567540407};
std::vector<float_t> k2mac_b {1.812964677810669, -1.3452805280685425, -13.403197288513184, -5.663599014282227, 0.2717350721359253, -6.828726768493652, -1.242165446281433, 14.501571655273438, -2.0980451107025146, 0.29976290464401245, 0.6149283647537231, -0.4947164058685303, -6.976255893707275, 0.0975736677646637, 0.07121635228395462, 2.157682418823242, 5.515017509460449, 3.0372841358184814, 1.3811670541763306, -2.2671475410461426, -20.664323806762695, -0.4412239193916321, 5.400656700134277, 2.790433645248413, 5.134408950805664, 13.57512378692627, -6.674834251403809, 4.702496528625488, -1.1047075986862183, -2.6653263568878174, -2.013288736343384, -1.1009968519210815, -2.02067232131958, -6.147135257720947, 2.31880784034729, -1.3880916833877563, 4.336322784423828, 3.1849234104156494, -1.6821644306182861, -4.760280609130859, 4.795339584350586, 0.25345611572265625, -1.0753321647644043, 0.7339316606521606, -0.14651894569396973, -0.03148546814918518, -4.985223770141602, 1.298032522201538, 12.540846824645996, -3.2488272190093994, -3.4373695850372314, -1.915045976638794, -3.047759532928467, -3.819194793701172, -3.873793840408325, -9.399827003479004, -2.317518711090088, -1.4863364696502686, -5.308393478393555, -1.0420011281967163, 0.11655592918395996, 2.6995208263397217, -3.4266197681427, -9.100884437561035, -10.164735794067383, 2.10158371925354, -0.6613043546676636, 1.2560043334960938, -2.9049477577209473, -1.872754693031311, -0.7105721235275269, 4.928382873535156, 4.162968635559082, 6.567568778991699, 6.717808723449707, 3.6412835121154785, -1.6003974676132202, -0.4265528917312622, -10.484822273254395, 3.19923734664917, -0.3784065246582031, 1.45735764503479, -2.4331917762756348, 1.1167254447937012, 5.562458515167236, 5.762538909912109, 5.989210605621338, 0.5981485843658447, 0.40357446670532227, 2.896214485168457, 9.40595817565918, -0.27289140224456787, 10.296622276306152, -14.208678245544434, 5.8617706298828125, 0.9000364542007446, -1.3743759393692017, -3.5517396926879883, -8.256986618041992, 2.7921950817108154, 2.9471096992492676, 13.456417083740234, 3.055283546447754, 2.4665517807006836, 2.7775886058807373, 4.462285041809082, -16.744192123413086, 1.905673623085022, 7.403626441955566, -4.128028392791748, 0.35953137278556824, -2.8865714073181152, 0.7106126546859741, -1.486975908279419, -0.6438034772872925, -1.594444751739502, -4.882678031921387, -0.318633496761322, 4.081351280212402, 4.252183437347412, -0.503813624382019, -0.28723958134651184, 3.8156983852386475, -0.005495786666870117, 0.8126981854438782, 6.764726638793945, -7.256498336791992, 8.449667930603027};

// instance to be compiled and used in host within xclbin
MacGraphTest<MacScalar,float,BCHUNK,128,1> macScalar(
  "macScalar", 
  k2mac_w, k2mac_b,
  "k2mac_in_shape196x128.txt", 
  "k2mac_goldenout_shape196x128_MacScalar.txt");

MacGraphTest<MacFloat,float,BCHUNK,128,1> macFloat(
  "macFloat", 
  k2mac_w, k2mac_b,
  "k2mac_in_shape196x128.txt", 
  "k2mac_goldenout_shape196x128_MacFloat.txt");


#ifdef __X86SIM__
int main(int argc, char ** argv) {
	adfCheck(macScalar.init(), "init macScalar");
  adfCheck(macScalar.run(ITER_CNT*B/BCHUNK), "run macScalar");
	adfCheck(macScalar.end(), "end macScalar");

  adfCheck(macFloat.init(), "init macFloat");
  adfCheck(macFloat.run(ITER_CNT*B/BCHUNK), "run macFloat");
	adfCheck(macFloat.end(), "end macFloat");
  return 0;
}
#endif


#ifdef __AIESIM__
int main(int argc, char ** argv) {
	adfCheck(macScalar.init(), "init macScalar");
  get_graph_throughput_by_port(macScalar, "plout[0]", macScalar.plout[0], BCHUNK*128, sizeof(float), ITER_CNT*B/BCHUNK);
	adfCheck(macScalar.end(), "end macScalar");

  adfCheck(macFloat.init(), "init macFloat");
  get_graph_throughput_by_port(macFloat, "plout[0]", macFloat.plout[0], BCHUNK*128, sizeof(float), ITER_CNT*B/BCHUNK);
	adfCheck(macFloat.end(), "end macFloat");
  return 0;
}
#endif
