#include "graph_conv.h"
#include "graph_utils.h"


template <
  template<int, int, int, int, int, int> class CONV, 
  template<int, int, int, int> class CONCAT, 
  int IS_BCHW, int IS_KPAD,
  int MCHUNK, int INP_W, int OUT_W, int B, int C, int M, int K>
class ConvReluChunkGraphTest : public adf::graph {

  private:
    ConvReluChunkGraph<CONV, CONCAT, IS_BCHW, IS_KPAD, MCHUNK, INP_W, OUT_W, B, C, M, K> g;
    static const int CHUNK_COUNT = ConvReluChunkGraph<CONV, CONCAT, IS_BCHW, IS_KPAD, MCHUNK, INP_W, OUT_W, B, C, M, K>::CHUNK_COUNT;

  public:
    adf::input_plio plin[CHUNK_COUNT];
    adf::output_plio plout[1];

    ConvReluChunkGraphTest(
      const std::string& id,
      std::vector<float> weights,
      std::vector<float> bias,
      const std::string& INP_TXT,
      const std::string& OUT_TXT = "conv_out.txt"
    ): g(weights, bias) { 
      for (int i = 0; i < CHUNK_COUNT; i++) {
        std::string plio_name = "plin"+std::to_string(i)+"_conv"+id+"_input";
        plin[i] = adf::input_plio::create(plio_name, PLIO64_ARG(INP_TXT));
        adf::connect<adf::window<B*INP_W*INP_W*C*4>> (plin[i].out[0], g.pin[i]);
      }
      plout[0] = adf::output_plio::create("plout0_conv"+id+"_output", PLIO64_ARG(OUT_TXT));
      adf::connect<adf::window<B*OUT_W*OUT_W*M*4>> (g.pout[0], plout[0].in[0]);
    }
};


// instance to be compiled and used in host within xclbin
const int mchunk = 2; // aiecompiler have issues when this is 1 (deadlock?) or 3 (invalid seg)
std::vector<float> fpweights {0.1024137584524164, 0.156383348867963, 0.3041986915994078, 0.07535906908334034, 0.4246630028405929, 0.10761770514958191, 0.568217593669845, 0.24655693981115612, 0.5964330653496227, 0.11752564290363765, 0.9758838684185334, 0.9325612038573404, 0.3917969385646658, 0.24217859412608544, 0.2503982128535728, 0.48339353520239203, 0.03999280190071697, 0.639705106075127, 0.4083029083397448, 0.3774065725888873, 0.8093649714891984, 0.70903546018329, 0.954333815392692, 0.3519362404956907, 0.8975427646494055, 0.7699671862500889, 0.35742465159471304, 0.6216654364532578, 0.2885699576516956, 0.8743999170748423, 0.11242731721231125, 0.21243436129404103, 0.18303329207992114, 0.40302600240428865, 0.7452329600321291, 0.5269074490521803, 0.48767632353820756, 0.0005459648969956543, 0.4254017253550547, 0.06355377483615843, 0.20825325212148382, 0.9323939389604944, 0.2153982043432382, 0.8583376386342625, 0.8028933715613342, 0.15914623694224284, 0.6057119572702788, 0.11566187190501331, 0.7278881583695115, 0.6374622773722066, 0.8119385616910193, 0.47938454938918806, 0.9148630878333829, 0.04934894678843971, 0.29288856502701466, 0.715052597465167, 0.41810921174800086, 0.17295135427115638, 0.10721074542854603, 0.8173391114616214, 0.47314297846564424, 0.8822836719191074, 0.733289134316726, 0.4097262056307436, 0.37351101415568366, 0.5156383466512517, 0.8890599531897286, 0.7372785797141679, 0.00515296426902323, 0.6941578513691256, 0.9195074069058207, 0.7104557595044916, 0.1770057815674959, 0.4835181274274587, 0.1403160179234194, 0.3589952783396321, 0.9371170419405177, 0.9233053075587083, 0.2828368521760829, 0.33963104416619916, 0.6002128681312939, 0.96319729526038, 0.14780133406539042, 0.2569166436866691, 0.8735568272907714, 0.4918922317083445, 0.8989610922270317, 0.18551789752317627, 0.5326685874713607, 0.32626963264937237, 0.31654255989247604, 0.44687696394619913, 0.43307744910126844, 0.3573468796779544, 0.9149707703156186, 0.7317441854328928, 0.7275469913315297, 0.2899134495919554, 0.5777094243168404, 0.779179433301834, 0.7955903685432131, 0.34453046075431226, 0.7708727565686478, 0.735893896807733, 0.14150648562190027, 0.8659454685664772, 0.4413214701804108, 0.48641044888866547, 0.4483691788979973, 0.5678460014775075, 0.6211692473670547, 0.4981795657629434, 0.8667885432590956, 0.6277347561952844, 0.40142794930551995, 0.41669175690871096, 0.8108386151289514, 0.3481919427465201, 0.21145479578241355, 0.059383188005789234, 0.8760268479205742, 0.9185464511903499, 0.12012018216347597, 0.33447374149611486, 0.17537206951524387, 0.11589846882587973, 0.8998667430000302, 0.05687725914535546, 0.9804856634690068, 0.09645086069738418, 0.8634706491935857, 0.5665061069891627, 0.36791748781787337, 0.3423423766251579, 0.7573641432377087, 0.3145732950042872, 0.6573189166171418, 0.5173260835160801, 0.4849656451580705, 0.9011621706491616, 0.5546450586202596, 0.8268616030486949, 0.7255735341014894, 0.03855724605899835, 0.7731100525054192, 0.21687025009104066, 0.9031496468515715, 0.042924190608832014, 0.33307203447431877, 0.09973294723475401};
std::vector<float> fpweights_pad {0.1024137584524164, 0.156383348867963, 0.3041986915994078, 0.07535906908334034, 0.4246630028405929, 0.0, 0.0, 0.0, 0.10761770514958191, 0.568217593669845, 0.24655693981115612, 0.5964330653496227, 0.11752564290363765, 0.0, 0.0, 0.0, 0.9758838684185334, 0.9325612038573404, 0.3917969385646658, 0.24217859412608544, 0.2503982128535728, 0.0, 0.0, 0.0, 0.48339353520239203, 0.03999280190071697, 0.639705106075127, 0.4083029083397448, 0.3774065725888873, 0.0, 0.0, 0.0, 0.8093649714891984, 0.70903546018329, 0.954333815392692, 0.3519362404956907, 0.8975427646494055, 0.0, 0.0, 0.0, 0.7699671862500889, 0.35742465159471304, 0.6216654364532578, 0.2885699576516956, 0.8743999170748423, 0.0, 0.0, 0.0, 0.11242731721231125, 0.21243436129404103, 0.18303329207992114, 0.40302600240428865, 0.7452329600321291, 0.0, 0.0, 0.0, 0.5269074490521803, 0.48767632353820756, 0.0005459648969956543, 0.4254017253550547, 0.06355377483615843, 0.0, 0.0, 0.0, 0.20825325212148382, 0.9323939389604944, 0.2153982043432382, 0.8583376386342625, 0.8028933715613342, 0.0, 0.0, 0.0, 0.15914623694224284, 0.6057119572702788, 0.11566187190501331, 0.7278881583695115, 0.6374622773722066, 0.0, 0.0, 0.0, 0.8119385616910193, 0.47938454938918806, 0.9148630878333829, 0.04934894678843971, 0.29288856502701466, 0.0, 0.0, 0.0, 0.715052597465167, 0.41810921174800086, 0.17295135427115638, 0.10721074542854603, 0.8173391114616214, 0.0, 0.0, 0.0, 0.47314297846564424, 0.8822836719191074, 0.733289134316726, 0.4097262056307436, 0.37351101415568366, 0.0, 0.0, 0.0, 0.5156383466512517, 0.8890599531897286, 0.7372785797141679, 0.00515296426902323, 0.6941578513691256, 0.0, 0.0, 0.0, 0.9195074069058207, 0.7104557595044916, 0.1770057815674959, 0.4835181274274587, 0.1403160179234194, 0.0, 0.0, 0.0, 0.3589952783396321, 0.9371170419405177, 0.9233053075587083, 0.2828368521760829, 0.33963104416619916, 0.0, 0.0, 0.0, 0.6002128681312939, 0.96319729526038, 0.14780133406539042, 0.2569166436866691, 0.8735568272907714, 0.0, 0.0, 0.0, 0.4918922317083445, 0.8989610922270317, 0.18551789752317627, 0.5326685874713607, 0.32626963264937237, 0.0, 0.0, 0.0, 0.31654255989247604, 0.44687696394619913, 0.43307744910126844, 0.3573468796779544, 0.9149707703156186, 0.0, 0.0, 0.0, 0.7317441854328928, 0.7275469913315297, 0.2899134495919554, 0.5777094243168404, 0.779179433301834, 0.0, 0.0, 0.0, 0.7955903685432131, 0.34453046075431226, 0.7708727565686478, 0.735893896807733, 0.14150648562190027, 0.0, 0.0, 0.0, 0.8659454685664772, 0.4413214701804108, 0.48641044888866547, 0.4483691788979973, 0.5678460014775075, 0.0, 0.0, 0.0, 0.6211692473670547, 0.4981795657629434, 0.8667885432590956, 0.6277347561952844, 0.40142794930551995, 0.0, 0.0, 0.0, 0.41669175690871096, 0.8108386151289514, 0.3481919427465201, 0.21145479578241355, 0.059383188005789234, 0.0, 0.0, 0.0, 0.8760268479205742, 0.9185464511903499, 0.12012018216347597, 0.33447374149611486, 0.17537206951524387, 0.0, 0.0, 0.0, 0.11589846882587973, 0.8998667430000302, 0.05687725914535546, 0.9804856634690068, 0.09645086069738418, 0.0, 0.0, 0.0, 0.8634706491935857, 0.5665061069891627, 0.36791748781787337, 0.3423423766251579, 0.7573641432377087, 0.0, 0.0, 0.0, 0.3145732950042872, 0.6573189166171418, 0.5173260835160801, 0.4849656451580705, 0.9011621706491616, 0.0, 0.0, 0.0, 0.5546450586202596, 0.8268616030486949, 0.7255735341014894, 0.03855724605899835, 0.7731100525054192, 0.0, 0.0, 0.0, 0.21687025009104066, 0.9031496468515715, 0.042924190608832014, 0.33307203447431877, 0.09973294723475401, 0.0, 0.0, 0.0};
std::vector<float> fpbias {0.47558911708484375, 0.8200224358697518, 0.2981873596630641, 0.1509348973110416, 0.3302670356968992, 0.813880141920636};

// BCHW
ConvReluChunkGraphTest<ConvReluScalarBCHW, ConcatVector, 1, 0, mchunk, 28, 24, 1, 1, 6, 5> convReluScalarBCHW(
  "convReluScalarBCHW", fpweights, fpbias, 
  "conv_fpin.txt", "conv_fpout_ConvReluScalarBCHW_shape1x6x24x24.txt");

ConvReluChunkGraphTest<Conv5x5ReluBCHW, ConcatVector, 1, 0, mchunk, 28, 24, 1, 1, 6, 5> conv5x5ReluBCHW(
  "conv5x5ReluBCHW", fpweights, fpbias, 
  "conv_fpin.txt", "conv_fpout_Conv5x5ReluBCHW_shape1x6x24x24.txt");

ConvReluChunkGraphTest<Conv5x5on8ReluBCHW, ConcatVector, 1, 1, mchunk, 28, 24, 1, 1, 6, 5> conv5x5on8ReluBCHW(
  "conv5x5on8ReluBCHW", fpweights_pad, fpbias, 
  "conv_fpin.txt", "conv_fpout_Conv5x5on8ReluBCHW_shape1x6x24x24.txt");

// BHWC, ConcatVector requires CONCAT_BLOCK=M%4=0
ConvReluChunkGraphTest<ConvReluScalarBHWC, ConcatScalar, 0, 0, mchunk, 28, 24, 1, 1, 6, 5> convReluScalarBHWC(
  "convReluScalarBHWC", fpweights, fpbias, 
  "conv_fpin.txt", "conv_fpout_ConvReluScalarBHWC_shape1x6x24x24.txt");


#ifdef __X86SIM__
int main(int argc, char ** argv) {
  adfCheck(convReluScalarBCHW.init(), "init convReluScalarBCHW");
  adfCheck(convReluScalarBCHW.run(ITER_CNT), "run convReluScalarBCHW");
	adfCheck(convReluScalarBCHW.end(), "end convReluScalarBCHW");

  adfCheck(conv5x5ReluBCHW.init(), "init conv5x5ReluBCHW");
  adfCheck(conv5x5ReluBCHW.run(ITER_CNT), "run conv5x5ReluBCHW");
	adfCheck(conv5x5ReluBCHW.end(), "end conv5x5ReluBCHW");

  adfCheck(conv5x5on8ReluBCHW.init(), "init conv5x5on8ReluBCHW");
  adfCheck(conv5x5on8ReluBCHW.run(ITER_CNT), "run conv5x5on8ReluBCHW");
	adfCheck(conv5x5on8ReluBCHW.end(), "end conv5x5on8ReluBCHW");

  adfCheck(convReluScalarBHWC.init(), "init convReluScalarBHWC");
  adfCheck(convReluScalarBHWC.run(ITER_CNT), "run convReluScalarBHWC");
	adfCheck(convReluScalarBHWC.end(), "end convReluScalarBHWC");
  return 0;
}
#endif


#ifdef __AIESIM__
int main(int argc, char ** argv) {
  adfCheck(convReluScalarBCHW.init(), "init convReluScalarBCHW");
  get_graph_throughput_by_port(convReluScalarBCHW, "plout[0]", convReluScalarBCHW.plout[0], 1*24*24*2, sizeof(float_t), ITER_CNT);
	adfCheck(convReluScalarBCHW.end(), "end convReluScalarBCHW");

  adfCheck(conv5x5ReluBCHW.init(), "init conv5x5ReluBCHW");
  get_graph_throughput_by_port(conv5x5ReluBCHW, "plout[0]", conv5x5ReluBCHW.plout[0], 1*8*8*8, sizeof(float_t), ITER_CNT);
	adfCheck(conv5x5ReluBCHW.end(), "end conv5x5ReluBCHW");

  adfCheck(conv5x5on8ReluBCHW.init(), "init conv5x5on8ReluBCHW");
  get_graph_throughput_by_port(conv5x5on8ReluBCHW, "plout[0]", conv5x5on8ReluBCHW.plout[0], 1*8*8*8, sizeof(float_t), ITER_CNT);
	adfCheck(conv5x5on8ReluBCHW.end(), "end conv5x5on8ReluBCHW");

  adfCheck(convReluScalarBHWC.init(), "init convReluScalarBHWC");
  get_graph_throughput_by_port(convReluScalarBHWC, "plout[0]", convReluScalarBHWC.plout[0], 1*8*8*8, sizeof(float_t), ITER_CNT);
	adfCheck(convReluScalarBHWC.end(), "end convReluScalarBHWC");
  return 0;
}
#endif
